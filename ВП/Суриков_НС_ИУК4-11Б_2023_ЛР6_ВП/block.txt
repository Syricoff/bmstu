start
    block(maxNum = X[0])
    for(i = 1(1\)n){
        block(num1 = 
            X[i].numerator * 
            maxNum.denominator)
        block(num2 = 
            maxNum.numerator
            * X[i].denominator)
        if(num1 > num2)
        then(да){ block(maxNum = X[i]) }
        fn(return maxNum)
    }
stop

start
    io(Вывод: 
       Введите кол-во 
       рациональных чисел)
    io(Ввод:  n)

pc(A
03
04)

pc(A
03
04)

    for(i = 0(1\)n){
        io(Вывод: 
           Введите числитель:)
        io(Ввод: 
           numbers[i].numerator)
        
        io(Вывод: 
           Введите знаменатель:)
        io(Ввод: 
           numbers[i].denominator)
    }

connect(A)

connect(A)

    block(size = длина 
          массива numbers)
    fn(maxNumber = 
       MAX
      (numbers, size\))
    io(Вывод: 
       maxNumber.numerator, 
       '/', 
       maxNumber.denominator)
stop

start
    for(i = 0(1\)n){
        for(j = i+1(1\)n){
            if(dates[i].year > 
            dates[j].year)
            block(temp = dates[i]
                  dates[i] = dates[j]
                  dates[j] = temp)
        }
    }
stop

start
    for(i = 0(1\)n){
        for(j = i+1(1\)n){
            if(dates[i].event > 
            dates[j].event)
            block(temp = dates[i]
                  dates[i] = dates[j]
                  dates[j] = temp)
        }
    }
stop

start
    block(totalYears = 0)
    for(i = 0(1\)n-1){
        block(totalYears = 
        totalYears 
        + dates[i+1].year 
        - dates[i].year)
    }
    fn(return 
    totalYears/(n-1\))
stop

start
    for(i = 0(1\)n){
        block(firstLetter = 
              нижний регистр
              dates[i].event[0])
        if(firstLetter
        это буква)
        then(да){
            block(letterCount
[номер по алфавиту] =
            letterCount
[номер по алфавиту] + 1)
        }
    }

pc(B
08
09)

pc(B
08
09)

    block(mostFrequentLetter = 'a'
    maxCount = letterCount[0])
    for(i = 1(1\)26){
        if(letterCount[i] 
        > maxCount)
        then(да){
            block(mostFrequentLetter = 
'a' + i;
            maxCount = 
            letterCount[i])
        }
    }
    fn(return 
    mostFrequentLetter)
stop

start
    io(Вывод: Введите 
    количество дат)
    io(Ввод:  n)

connect(A)

connect(A)

    for(i = 0(1\)n){
        io(Вывод: 
           Введите дату:)
        io(Ввод: 
            dates[i].year)
        
        io(Вывод: 
           Введите описание:)
        io(Ввод: 
           dates[i].event)
    }

pc(C
10
11)

pc(C
10
11)

    block(size = длина 
          массива dates)

    fn(sortByYear
(dates, size\))
    io(Вывод: Структуры, 
    отсортированные
по году:)
    for(i = 0(1\)size){
        io(Вывод: dates[i].year, 
        " - ", dates[i].event)
    }

connect(B)

connect(B)

    fn(averageInt = 
    averageInterval
    (dates, size\))
    io(Вывод: Средний 
    интервал между
датами:, averageInt, лет)
    
    fn(mostFreqLetter = 
    mostFrequent
FirstLetter
    (dates, size\))
    io(Вывод:Наиболее часто
    встречающаяся первая 
    буква в названии
события:, 
mostFreqLetter) 
stop

start
    block(result.real = 
    num1.real * num2.real -
    num1.imag * num2.imag)
    block(result.imag = 
    num1.real * num2.imag +
    num1.imag * num2.real)
    fn(return result)
stop

start
io(Вывод: Введите 
реальную часть 
числа 1:)
io(Ввод: num1.real)
io(Вывод: Введите 
мнимую часть 
числа 1:)
io(Ввод: num1.imag)

pc(D
12
13)

pc(D
12
13)

io(Вывод: Введите 
реальную часть 
числа 2:)
io(Ввод: num2.real)
io(Вывод: Введите 
мнимую часть 
числа 2:)
io(Ввод: num2.imag)

connect(A)

connect(A)

fn(result = 
multiplyComplex
(num1, num2\))

io(Вывод: 
"Результат умножения":,
 result.real, "+",
  result.imag, "i")

stop

start
io(Вывод: 
"Меню:")
io(Вывод: 
"1. Задание 1")
io(Вывод: 
"2. Задание 2")

connect(A)

connect(A)

io(Вывод: 
"3. Задание 3")
io(Вывод: 
"0. Выход")
io(Вывод: 
"Выберите 
номер задания: ")
stop

start
do_while(choice != 0){
fn(printMenu(\))
io(Ввод: choice)

connect(A)


connect(B)

}

stop

connect(A)

switch(choice)
case(1) { fn(task1(\)) }
case(2) { fn(task2(\)) }
case(3) { fn(task3(\)) }
case(0) { io(Вывод: 
Выход из программы.) }
case(default) { io(Вывод: 
Некорректный выбор. 
Попробуйте еще раз.) }

connect(B)
