def encode_text(text):
    # Инициализируем словарь с начальными символами
    dictionary = {chr(i): i for i in range(2**14)}
    # Инициализируем текущую последовательность символов
    sequence = ""
    # Инициализируем пустой закодированный список
    encoded_text = []
    # Проходим по всем символам в тексте
    for char in text:
        # Обновляем текущую последовательность символов
        new_sequence = sequence + char
        # Если новая последовательность уже есть в словаре, добавляем ее к текущей последовательности
        if new_sequence in dictionary:
            sequence = new_sequence
        # Иначе добавляем код текущей последовательности в закодированный список,
        # добавляем новую последовательность в словарь и обновляем текущую последовательность
        else:
            encoded_text.append(dictionary[sequence])
            dictionary[new_sequence] = len(dictionary)
            sequence = char
    # Добавляем код последней текущей последовательности в закодированный список
    encoded_text.append(dictionary[sequence])
    return encoded_text


def decode_text(encoded_text):
    # Инициализируем словарь с начальными символами
    dictionary = {i: chr(i) for i in range(2**14)}
    # Инициализируем предыдущий код и текущую последовательность символов
    prev_code = encoded_text[0]
    sequence = dictionary[prev_code]
    # Инициализируем пустой декодированный текст
    decoded_text = sequence
    # Проходим по кодам в закодированном списке, начиная со второго кода
    for code in encoded_text[1:]:
        # Если код есть в словаре, получаем соответствующую последовательность символов
        if code in dictionary:
            sequence = dictionary[code]
        # Иначе получаем последовательность символов, добавляя предыдущую последовательность и первый символ текущей последовательности
        else:
            sequence = dictionary[prev_code] + dictionary[prev_code][0]
        # Добавляем последовательность символов к декодированному тексту и обновляем словарь
        decoded_text += sequence
        dictionary[len(dictionary)] = dictionary[prev_code] + sequence[0]
        # Обновляем предыдущий код
        prev_code = code
    return decoded_text


def binary_representation(encoded_text):
    # Преобразуем каждый код в закодированном списке в двоичное представление и объединяем все двоичные строки
    binary_string = ''.join(format(code, '08b') for code in encoded_text)
    return binary_string


# Пример использования
text = """Ткнул этот человек собачку свою в следы возле двери, сказал «пс» и отошёл. Понюхала собака воздух, повела по толпе глазом (народ, конечно, собрался) и вдруг к бабке Фёкле, с пятого номера, подходит и нюхает ей подол. Бабка за толпу. Собака за юбку. Бабка в сторону — и собака за ней. Ухватила бабку за юбку и не пущает.
Рухнула бабка на колени перед агентом.
— Да,— говорит,— попалась. Не отпираюсь. И,— говорит,— пять ведёр закваски — это так. И аппарат — это действительно верно. Всё,— говорит,— находится в ванной комнате. Ведите меня в милицию.
Ну, народ, конечно, ахнул.
— А шуба? — спрашивают.
— Про шубу,— говорит,— ничего не знаю и ведать не ведаю, а остальное — это так. Ведите меня, казните.
Ну, увели бабку.
Снова взял агент собачищу свою, снова ткнул её носом в следы, сказал «пс» и отошёл.
Повела собачища глазом, понюхала пустой воздух и вдруг к гражданину управдому подходит."""

encoded = encode_text(text)
print("Закодированный текст:", encoded)
decoded = decode_text(encoded)
print("Раскодированный текст:", decoded)
bi = binary_representation(encoded)
print(bi)
