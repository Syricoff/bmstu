// Написать и отладить три программы.
// Первая программа демонстрирует использование контейнерных
// классов для хранения встроенных типов данных.
// Вторая программа демонстрирует использование контейнерных
// классов для хранения пользовательских типов данных.
// Третья программа демонстрирует использование алгоритмов STL.

// В программе № 1 выполнить следующее:
// 1. Создать объект multiset контейнера и заполнить его данными, тип которых int.
// 2. Просмотреть контейнер.
// 3. Изменить контейнер, удалив из него одни элементы и заменив другие.
// 4. Просмотреть контейнер, используя для доступа к его элементам итераторы.
// 5. Создать второй контейнер этого же класса и заполнить его данными того же типа, что и первый контейнер.
// 6. Изменить первый контейнер, удалив из него n элементов после заданного и добавив затем в него все элементы из второго контейнера.
// 7. Просмотреть первый и второй контейнеры.

// В программе № 2 выполнить то же самое, но для данных пользовательского типа.
// #pragma once

// #include <string>
// #include <iostream>
// #include <vector>
// #include "./Exception/Exception.h"

// using std::cout;
// using std::string;
// using std::cin;

// namespace SNS
// {
//     class Car
//     {
//     private:
//         std::string brand;
//         double price;
//         int year;
//         std::string description;
//         std::string features;

//     public:
//         Car();
//         Car(const std::string, double, int, const std::string, const std::string);

//         using CarsList = std::vector<Car *>;

//         void displayInfo();

//         std::string getBrand() const;
//         double getPrice() const;
//         int getYear() const;
//         std::string getDescription() const;
//         std::string getFeatures() const;

//         void setBrand(const std::string &brand);
//         void setPrice(double price);
//         void setYear(int year);
//         void setDescription(const std::string &description);
//         void setFeatures(const std::string &features);

//         bool operator>(const Car &car) const;
//         bool operator<(const Car &car) const;

//         friend std::ostream &operator<<(std::ostream &out, const Car &car);
//         friend std::istream &operator>>(std::istream &in, Car &car);
//     };
// } // namespace SNS


// В программе № 3 выполнить следующее:
// 1. Создать multiset, содержащий объекты пользовательского типа.
// 2. Отсортировать его по убыванию элементов.
// 3. Просмотреть контейнер.
// 4. Используя подходящий алгоритм, найти в контейнере элемент, удовлетворяющий заданному условию.
// 5. Переместить элементы, удовлетворяющие заданному условию в другой (предварительно пустой) контейнер. Тип второго контейнера vector
// 6. Просмотреть второй контейнер.
// 7. Отсортировать первый и второй контейнеры по возрастанию элементов.
// 8. Просмотреть их.
// 9. Получить третий контейнер путем слияния первых двух.
// 10. Просмотреть третий контейнер.
// 11. Подсчитать, сколько элементов, удовлетворяющих заданному условию, содержит третий контейнер.
// 12. Определить, есть ли в третьем контейнере элемент, удовлетворяющий заданному условию.
